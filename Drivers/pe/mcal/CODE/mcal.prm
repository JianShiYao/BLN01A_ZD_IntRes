/*
** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : mcal.PRM
**     Project   : mcal
**     Processor : MC9S12XEQ384MAG
**     Compiler  : CodeWarrior HCS12X C Compiler
**     Date/Time : 2013/11/21, 15:04
**     Abstract  :
**        This file is used by the linker. It describes files to be linked,
**        memory ranges, stack size, etc. For detailed description of the PRM file
**        see CodeWarrior documentation. This file is generated by default.
**        You can switch off generation by setting the property
**        "Generate PRM file = no" on the "Build options" tab in CPU component and then modify
**        this file if needed.
**
**     Copyright : 1997 - 2011 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################
*/

NAMES

END

SEGMENTS  /* Here all RAM/ROM areas of the device are listed. Used in PLACEMENT below. */
      RAM           = READ_WRITE    0x2000 TO   0x3FEE;//0x3FF0;
      BOOTRAM       = NO_INIT       0x3FEF TO   0x3FF0; 
      // RAM           = READ_WRITE    0x2000  TO   0x3FFC;     
      ROM_4000      = READ_ONLY     0x4000 TO   0x7FFF;      
      ROM_C000      = READ_ONLY     0xC000 TO   0xE9FF;
     // ROM_BOOT      = READ_ONLY     0xDC00 TO   0xDCFF; 
      BOOT_ROM_VECTOR = READ_ONLY     0xEB00 TO   0xEBFF;  /*bootloader 中断向量表*******/
      BOOT_ROM_5K     = READ_ONLY     0xEC00 TO   0xFEFF;  /*大小5K*/
        
      //ROM_C000_VECTOR = READ_ONLY 0xDD00 TO 0xDFFF; // keep for place vector in BootLoader
      //ROM_E000      = READ_ONLY     0xE000 TO   0xFBFF; // keep for place bootloader
      PAGE_E0       = READ_ONLY   0xE08000 TO 0xE0BFFF;
      PAGE_E1       = READ_ONLY   0xE18000 TO 0xE1BFFF;
      PAGE_E2       = READ_ONLY   0xE28000 TO 0xE2BFFF;
      PAGE_E3       = READ_ONLY   0xE38000 TO 0xE3BFFF;
      PAGE_E4       = READ_ONLY   0xE48000 TO 0xE4BFFF;
      PAGE_E5       = READ_ONLY   0xE58000 TO 0xE5BFFF;
      PAGE_E6       = READ_ONLY   0xE68000 TO 0xE6BFFF;
      PAGE_E7       = READ_ONLY   0xE78000 TO 0xE7BFFF;
      PAGE_F0       = READ_ONLY   0xF08000 TO 0xF0BFFF;
      PAGE_F1       = READ_ONLY   0xF18000 TO 0xF1BFFF;
      PAGE_F2       = READ_ONLY   0xF28000 TO 0xF2BFFF;
      PAGE_F3       = READ_ONLY   0xF38000 TO 0xF3BFFF;
      PAGE_F4       = READ_ONLY   0xF48000 TO 0xF4BFFF;
      PAGE_F5       = READ_ONLY   0xF58000 TO 0xF5BFFF;
      PAGE_F6       = READ_ONLY   0xF68000 TO 0xF6BFFF;
      PAGE_F7       = READ_ONLY   0xF78000 TO 0xF7BFFF;
      PAGE_F8       = READ_ONLY   0xF88000 TO 0xF8BFFF;
      PAGE_F9       = READ_ONLY   0xF98000 TO 0xF9BFFF;
      PAGE_FA       = READ_ONLY   0xFA8000 TO 0xFABFFF;
      PAGE_FB       = READ_ONLY   0xFB8000 TO 0xFBBFFF;
      PAGE_FC       = READ_ONLY   0xFC8000 TO 0xFCBFFF;
      PAGE_FE       = READ_ONLY   0xFE8000 TO 0xFEBFFF;
     /* RAM_FA        = READ_WRITE  0xFA1000 TO 0xFA1FFF;
      RAM_FB        = READ_WRITE  0xFB1000 TO 0xFB1FFF;
      RAM_FC        = READ_WRITE  0xFC1000 TO 0xFC1FFF;
      RAM_FD        = READ_WRITE  0xFD1000 TO 0xFD1FFF; */
      RAM_FABCD     = READ_WRITE  0xF0000'G TO 0xFDFFF'G;
END

PLACEMENT /* here all predefined and user segments are placed into the SEGMENTS defined above. */
    _PRESTART,
    STARTUP,
    ROM_VAR,
    STRINGS,
    NON_BANKED,
    COPY                INTO   ROM_C000,ROM_4000;
    DEFAULT_ROM         INTO   PAGE_FE, PAGE_FC, PAGE_FB, PAGE_FA, PAGE_F9, PAGE_F8, PAGE_F7, PAGE_F6,
                               PAGE_F5, PAGE_F4, PAGE_F3, PAGE_F2, PAGE_F1, PAGE_F0, PAGE_E7, PAGE_E6,
                               PAGE_E5, PAGE_E4, PAGE_E3, PAGE_E2, PAGE_E1, PAGE_E0;
    DEFAULT_RAM         INTO   RAM;
    BOOT_RAM            INTO  BOOTRAM;
    //PAGED_RAM           INTO   RAM_FA, RAM_FB, RAM_FC, RAM_FD;
    PAGED_RAM           INTO   RAM_FABCD;
  //  BOOT_INTERFACE_ROM     INTO    ROM_BOOT; // For Access To BootLoad                        
END

INIT _EntryPoint                       /* The entry point of the application. This function is generated into the CPU module. */

STACKSIZE 0x0400                       /* Size of the system stack. Value can be changed on the "Build options" tab */
